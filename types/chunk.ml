open! Core_kernel

type t =
  { x : int
  ; y : int
  ; array : Float_bigarray.t
  }
[@@deriving sexp]

let size = 88 * 88

let create ~x ~y =
  let array = Float_bigarray.create size in
  { x; y; array }
;;

let to_underlying t = t.array

let apply t ~f =
  let ptr = Float_bigarray.address_of t.array in
  let length = Float_bigarray.length t.array in
  f ~x:t.x ~y:t.y ptr length
;;

module Debug = struct
  let debug t ~f =
    List.iter (List.range ~stride:2 0 88) ~f:(fun y ->
        List.iter (List.range ~stride:2 0 88) ~f:(fun x ->
            let idx = (y * 88) + x in
            let v = Float_bigarray.get t.array idx in
            let s = f v in
            Out_channel.(output_string stdout s));
        print_endline "")
  ;;

  let borders =
    debug ~f:(fun v ->
        (match Float.sign_exn v with
        | Sign.Neg -> '_'
        | Sign.Zero -> '-'
        | Sign.Pos -> '#')
        |> Char.to_string)
  ;;

  let values = debug ~f:(fun v -> Float.to_string_hum v ^ " ")
end

let%expect_test "empty chunk" =
  Debug.borders (create ~x:0 ~y:0);
  [%expect
    {|
      --------------------------------------------
      --------------------------------------------
      --------------------------------------------
      --------------------------------------------
      --------------------------------------------
      --------------------------------------------
      --------------------------------------------
      --------------------------------------------
      --------------------------------------------
      --------------------------------------------
      --------------------------------------------
      --------------------------------------------
      --------------------------------------------
      --------------------------------------------
      --------------------------------------------
      --------------------------------------------
      --------------------------------------------
      --------------------------------------------
      --------------------------------------------
      --------------------------------------------
      --------------------------------------------
      --------------------------------------------
      --------------------------------------------
      --------------------------------------------
      --------------------------------------------
      --------------------------------------------
      --------------------------------------------
      --------------------------------------------
      --------------------------------------------
      --------------------------------------------
      --------------------------------------------
      --------------------------------------------
      --------------------------------------------
      --------------------------------------------
      --------------------------------------------
      --------------------------------------------
      --------------------------------------------
      --------------------------------------------
      --------------------------------------------
      --------------------------------------------
      --------------------------------------------
      --------------------------------------------
      --------------------------------------------
      -------------------------------------------- |}]
;;
