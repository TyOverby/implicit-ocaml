open! Core_kernel
open! Async

type debug =
  { c_source : unit -> string
  ; asm_source : unit -> string Deferred.t
  }

let eval shape chunk =
  let compiled = Shape.compile shape in
  let f =
    let open Jitsy in
    let open Function.Let_syntax in
    let%bind x_offset = Type.int32 in
    let%bind y_offset = Type.int32 in
    let%bind array = Type.int32_array in
    let%bind a = Type.int in
    let open Expr in
    let i_88 = int_lit 88 in
    let i32_88 = int32_lit (Int32.of_int_exn 88) in
    return
      (Expr.progn
         [ Expr.range2 ~width:i_88 ~height:i_88 ~f:(fun ~x ~y ~pos ->
               let x, y = int_to_int32 x, int_to_int32 y in
               let x = add_int32 x (mul_int32 x_offset i32_88) in
               let y = add_int32 y (mul_int32 y_offset i32_88) in
               array_set array pos (compiled ~x ~y))
         ]
         a)
  in
  let%map fn, asm_source = Jitsy.Compile.jit f in
  let fn ~x ~y = fn x y in
  let debug =
    { c_source =
        (fun () ->
          let source, _name = Jitsy.Compile.compile f in
          source)
    ; asm_source
    }
  in
  let _ = Chunk.apply chunk ~f:fn in
  debug
;;

let test
    ?(print_source = false)
    ?(pos = Int32.of_int_exn 0, Int32.of_int_exn 0)
    shape
  =
  let x, y = pos in
  let chunk = Chunk.create ~x ~y in
  let%bind debug = eval shape chunk in
  let debug_c = debug.c_source () in
  let%bind _debug_asm = debug.asm_source () in
  if print_source
  then (
    print_endline "===== source =====";
    print_endline debug_c);
  print_endline "===== shape ======";
  return (Chunk.Debug.borders chunk)
;;

let%expect_test "circle" =
  let i = Int32.of_int_exn in
  let%bind () = test (Shape.circle ~x:(i 0) ~y:(i 0) ~r:(i 44)) in
  [%expect
    {|
      ===== shape ======
      ______________________-#####################
      ______________________-#####################
      ______________________-#####################
      ______________________-#####################
      ______________________-#####################
      ______________________######################
      ______________________######################
      _____________________-######################
      _____________________-######################
      _____________________#######################
      ____________________-#######################
      ____________________########################
      ___________________-########################
      __________________-#########################
      _________________-##########################
      _________________###########################
      ________________############################
      ______________-#############################
      _____________-##############################
      ____________-###############################
      __________-#################################
      _______--###################################
      -----#######################################
      ############################################
      ############################################
      ############################################
      ############################################
      ############################################
      ############################################
      ############################################
      ############################################
      ############################################
      ############################################
      ############################################
      ############################################
      ############################################
      ############################################
      ############################################
      ############################################
      ############################################
      ############################################
      ############################################
      ############################################
      ############################################ |}]
;;

let%expect_test "bigger circle" =
  let i = Int32.of_int_exn in
  let%bind () = test (Shape.circle ~x:(i 0) ~y:(i 0) ~r:(i 88)) in
  [%expect
    {|
      ===== shape ======
      ____________________________________________
      ____________________________________________
      ____________________________________________
      ____________________________________________
      ____________________________________________
      ____________________________________________
      ____________________________________________
      ____________________________________________
      ____________________________________________
      ____________________________________________
      ___________________________________________-
      ___________________________________________-
      ___________________________________________#
      ___________________________________________#
      __________________________________________-#
      __________________________________________##
      _________________________________________-##
      _________________________________________-##
      _________________________________________###
      ________________________________________-###
      ________________________________________####
      _______________________________________-####
      _______________________________________#####
      ______________________________________-#####
      _____________________________________-######
      _____________________________________#######
      ____________________________________-#######
      ___________________________________-########
      __________________________________-#########
      __________________________________##########
      _________________________________###########
      ________________________________############
      _______________________________#############
      ______________________________##############
      ____________________________-###############
      ___________________________-################
      __________________________-#################
      ________________________-###################
      _______________________-####################
      _____________________-######################
      ___________________-########################
      ________________--##########################
      ______________-#############################
      __________--################################ |}]
;;

let%expect_test "union circle" =
  let i = Int32.of_int_exn in
  let%bind () =
    test
      (Shape.union
         [ Shape.circle ~x:(i 0) ~y:(i 0) ~r:(i 44)
         ; Shape.circle ~x:(i 88) ~y:(i 88) ~r:(i 44)
         ])
  in
  [%expect
    {|
    ===== shape ======
    ______________________-#####################
    ______________________-#####################
    ______________________-#####################
    ______________________-#####################
    ______________________-#####################
    ______________________######################
    ______________________######################
    _____________________-######################
    _____________________-######################
    _____________________#######################
    ____________________-#######################
    ____________________########################
    ___________________-########################
    __________________-#########################
    _________________-##########################
    _________________###########################
    ________________############################
    ______________-#############################
    _____________-##############################
    ____________-###############################
    __________-#################################
    _______--###################################
    -----###################################----
    ####################################--______
    ##################################-_________
    ################################-___________
    ###############################-____________
    ##############################-_____________
    #############################_______________
    ############################________________
    ###########################-________________
    ##########################-_________________
    #########################-__________________
    #########################___________________
    ########################-___________________
    ########################____________________
    #######################-____________________
    #######################-____________________
    #######################_____________________
    #######################_____________________
    ######################-_____________________
    ######################-_____________________
    ######################-_____________________
    ######################-_____________________ |}]
;;

let%expect_test "subtraction circle" =
  let i = Int32.of_int_exn in
  let%bind () =
    test
      (Shape.subtract
         (Shape.circle ~x:(i 0) ~y:(i 0) ~r:(i 88))
         (Shape.circle ~x:(i 0) ~y:(i 0) ~r:(i 44)))
  in
  [%expect
    {|
    ===== shape ======
    ######################-_____________________
    ######################-_____________________
    ######################-_____________________
    ######################-_____________________
    ######################-_____________________
    ######################______________________
    ######################______________________
    #####################-______________________
    #####################-______________________
    #####################_______________________
    ####################-______________________-
    ####################_______________________-
    ###################-_______________________#
    ##################-________________________#
    #################-________________________-#
    #################_________________________##
    ################_________________________-##
    ##############-__________________________-##
    #############-___________________________###
    ############-___________________________-###
    ##########-_____________________________####
    #######--______________________________-####
    -----__________________________________#####
    ______________________________________-#####
    _____________________________________-######
    _____________________________________#######
    ____________________________________-#######
    ___________________________________-########
    __________________________________-#########
    __________________________________##########
    _________________________________###########
    ________________________________############
    _______________________________#############
    ______________________________##############
    ____________________________-###############
    ___________________________-################
    __________________________-#################
    ________________________-###################
    _______________________-####################
    _____________________-######################
    ___________________-########################
    ________________--##########################
    ______________-#############################
    __________--################################ |}]
;;

let%expect_test "subtraction circle (different position)" =
  let i = Int32.of_int_exn in
  let%bind () =
    test
      ~pos:(i (-1), i (-1))
      (Shape.subtract
         (Shape.circle ~x:(i 0) ~y:(i 0) ~r:(i 88))
         (Shape.circle ~x:(i 0) ~y:(i 0) ~r:(i 44)))
  in
  [%expect
    {|
    ===== shape ======
    ######################################------
    #################################--_________
    ##############################-_____________
    ###########################--_______________
    #########################-__________________
    #######################-____________________
    #####################-______________________
    ####################-_______________________
    ##################-_________________________
    #################-__________________________
    ################-___________________________
    ###############_____________________________
    ##############______________________________
    #############_______________________________
    ############________________________________
    ###########_________________________________
    ##########-_________________________________
    #########-__________________________________
    ########-___________________________________
    ########____________________________________
    #######-____________________________________
    ######-_____________________________________
    ######__________________________________----
    #####-______________________________--######
    #####_____________________________-#########
    ####-___________________________-###########
    ####___________________________-############
    ###-__________________________-#############
    ###-_________________________###############
    ###_________________________################
    ##-________________________-################
    ##________________________-#################
    ##_______________________-##################
    #-_______________________###################
    #-______________________-###################
    #_______________________####################
    #______________________-####################
    #______________________-####################
    -______________________#####################
    -______________________#####################
    -_____________________-#####################
    -_____________________-#####################
    -_____________________-#####################
    -_____________________-##################### |}]
;;

let%expect_test "subtraction circle (different position)" =
  let i = Int32.of_int_exn in
  let%bind () =
    test
      ~pos:(i 0, i (-1))
      (Shape.subtract
         (Shape.circle ~x:(i 0) ~y:(i 0) ~r:(i 88))
         (Shape.circle ~x:(i 0) ~y:(i 0) ~r:(i 44)))
  in
  [%expect
    {|
      ===== shape ======
      -------#####################################
      __________--################################
      ______________-#############################
      ________________--##########################
      ___________________-########################
      _____________________-######################
      _______________________-####################
      ________________________-###################
      __________________________-#################
      ___________________________-################
      ____________________________-###############
      ______________________________##############
      _______________________________#############
      ________________________________############
      _________________________________###########
      __________________________________##########
      __________________________________-#########
      ___________________________________-########
      ____________________________________-#######
      _____________________________________#######
      _____________________________________-######
      ______________________________________-#####
      -----__________________________________#####
      #######--______________________________-####
      ##########-_____________________________####
      ############-___________________________-###
      #############-___________________________###
      ##############-__________________________-##
      ################_________________________-##
      #################_________________________##
      #################-________________________-#
      ##################-________________________#
      ###################-_______________________#
      ####################_______________________-
      ####################-______________________-
      #####################_______________________
      #####################-______________________
      #####################-______________________
      ######################______________________
      ######################______________________
      ######################-_____________________
      ######################-_____________________
      ######################-_____________________
      ######################-_____________________ |}]
;;
