open! Core_kernel
open! Async

let eval shape chunk =
  let compiled = Shape.compile shape in
  let f =
    let open Jitsy in
    let open Function.Let_syntax in
    let%bind array = Type.int32_array in
    let%bind a = Type.int in
    let open Expr in
    return
      (Expr.progn
         [ Expr.range2 ~width:(int_lit 88) ~height:(int_lit 88) ~f:(fun ~x ~y ~pos ->
               let x, y = int_to_int32 x, int_to_int32 y in
               array_set array pos (compiled ~x ~y))
         ]
         a)
  in
  let%map f, _asm_thunk = Jitsy.Compile.jit f in
  let _ = Chunk.apply chunk ~f in
  ()
;;

let%expect_test "circle" =
  let i = Int32.of_int_exn in
  let shape = Shape.circle ~x:(i 0) ~y:(i 0) ~r:(i 44) in
  let chunk = Chunk.create () in
  let%bind () = eval shape chunk in
  Chunk.debug chunk;
  [%expect
    {|
      ______________________-#####################
      ______________________-#####################
      ______________________-#####################
      ______________________-#####################
      ______________________-#####################
      ______________________######################
      ______________________######################
      _____________________-######################
      _____________________-######################
      _____________________#######################
      ____________________-#######################
      ____________________########################
      ___________________-########################
      __________________-#########################
      _________________-##########################
      _________________###########################
      ________________############################
      ______________-#############################
      _____________-##############################
      ____________-###############################
      __________-#################################
      _______--###################################
      -----#######################################
      ############################################
      ############################################
      ############################################
      ############################################
      ############################################
      ############################################
      ############################################
      ############################################
      ############################################
      ############################################
      ############################################
      ############################################
      ############################################
      ############################################
      ############################################
      ############################################
      ############################################
      ############################################
      ############################################
      ############################################
      ############################################ |}]
;;

let%expect_test "circle" =
  let i = Int32.of_int_exn in
  let shape = Shape.circle ~x:(i 0) ~y:(i 0) ~r:(i 88) in
  let chunk = Chunk.create () in
  let%bind () = eval shape chunk in
  Chunk.debug chunk;
  [%expect
    {|
      #___________________________________________
      ____________________________________________
      ____________________________________________
      ____________________________________________
      ____________________________________________
      ____________________________________________
      ____________________________________________
      ____________________________________________
      ____________________________________________
      ____________________________________________
      ___________________________________________-
      ___________________________________________-
      ___________________________________________#
      ___________________________________________#
      __________________________________________-#
      __________________________________________##
      _________________________________________-##
      _________________________________________-##
      _________________________________________###
      ________________________________________-###
      ________________________________________####
      _______________________________________-####
      _______________________________________#####
      ______________________________________-#####
      _____________________________________-######
      _____________________________________#######
      ____________________________________-#######
      ___________________________________-########
      __________________________________-#########
      __________________________________##########
      _________________________________###########
      ________________________________############
      _______________________________#############
      ______________________________##############
      ____________________________-###############
      ___________________________-################
      __________________________-#################
      ________________________-###################
      _______________________-####################
      _____________________-######################
      ___________________-########################
      ________________--##########################
      ______________-#############################
      __________--################################ |}]
;;
