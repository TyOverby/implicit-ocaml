open! Core_kernel

type t =
  { x : int
  ; y : int
  ; array :
      ( float
      , Bigarray.float32_elt
      , Bigarray.c_layout )
      Bigarray.Array1.t
  }

let size = 88 * 88

let create ~x ~y =
  let array =
    Bigarray.Array1.create Bigarray.float32 Bigarray.c_layout size
  in
  Bigarray.Array1.fill array 0.0;
  { x; y; array }
;;

let apply t ~f =
  let arr = Ctypes.array_of_bigarray Ctypes.array1 t.array in
  let ptr : float Ctypes.ptr = Ctypes.CArray.start arr in
  let length = Ctypes.CArray.length arr in
  f ~x:t.x ~y:t.y ptr length
;;

module Debug = struct
  let debug t ~f =
    List.iter (List.range ~stride:2 0 88) ~f:(fun y ->
        List.iter (List.range ~stride:2 0 88) ~f:(fun x ->
            let idx = (y * 88) + x in
            let v = t.array.{idx} in
            let s = f v in
            Out_channel.(output_string stdout s));
        print_endline "")
  ;;

  let borders =
    debug ~f:(fun v ->
        (match Float.sign_exn v with
        | Sign.Neg -> '_'
        | Sign.Zero -> '-'
        | Sign.Pos -> '#')
        |> Char.to_string)
  ;;

  let values = debug ~f:(fun v -> Float.to_string_hum v ^ " ")
end

let%expect_test "empty chunk" =
  Debug.borders (create ~x:0 ~y:0);
  [%expect
    {|
      --------------------------------------------
      --------------------------------------------
      --------------------------------------------
      --------------------------------------------
      --------------------------------------------
      --------------------------------------------
      --------------------------------------------
      --------------------------------------------
      --------------------------------------------
      --------------------------------------------
      --------------------------------------------
      --------------------------------------------
      --------------------------------------------
      --------------------------------------------
      --------------------------------------------
      --------------------------------------------
      --------------------------------------------
      --------------------------------------------
      --------------------------------------------
      --------------------------------------------
      --------------------------------------------
      --------------------------------------------
      --------------------------------------------
      --------------------------------------------
      --------------------------------------------
      --------------------------------------------
      --------------------------------------------
      --------------------------------------------
      --------------------------------------------
      --------------------------------------------
      --------------------------------------------
      --------------------------------------------
      --------------------------------------------
      --------------------------------------------
      --------------------------------------------
      --------------------------------------------
      --------------------------------------------
      --------------------------------------------
      --------------------------------------------
      --------------------------------------------
      --------------------------------------------
      --------------------------------------------
      --------------------------------------------
      -------------------------------------------- |}]
;;
