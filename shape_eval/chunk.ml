open! Core_kernel

type t = (int32, Bigarray.int32_elt, Bigarray.c_layout) Bigarray.Array1.t

let size = 88 * 88

let create () =
  let array = Bigarray.Array1.create Bigarray.int32 Bigarray.c_layout size in
  Bigarray.Array1.fill array Int32.zero;
  array
;;

let apply t ~f =
  let arr = Ctypes.array_of_bigarray Ctypes.array1 t in
  let ptr : int32 Ctypes.ptr = Ctypes.CArray.start arr in
  let length = Ctypes.CArray.length arr in
  f ptr length
;;

let debug t =
  List.iter (List.range ~stride:2 0 88) ~f:(fun y ->
      List.iter (List.range ~stride:2 0 88) ~f:(fun x ->
          let idx = (y * 88) + x in
          let v = t.{idx} in
          let c =
            match Int32.sign v with
            | Sign.Neg -> '_'
            | Sign.Zero -> '-'
            | Sign.Pos -> '#'
          in
          Out_channel.(output_char stdout c));
      print_endline "")
;;

let%expect_test "empty chunk" =
  debug (create ());
  [%expect
    {|
      --------------------------------------------
      --------------------------------------------
      --------------------------------------------
      --------------------------------------------
      --------------------------------------------
      --------------------------------------------
      --------------------------------------------
      --------------------------------------------
      --------------------------------------------
      --------------------------------------------
      --------------------------------------------
      --------------------------------------------
      --------------------------------------------
      --------------------------------------------
      --------------------------------------------
      --------------------------------------------
      --------------------------------------------
      --------------------------------------------
      --------------------------------------------
      --------------------------------------------
      --------------------------------------------
      --------------------------------------------
      --------------------------------------------
      --------------------------------------------
      --------------------------------------------
      --------------------------------------------
      --------------------------------------------
      --------------------------------------------
      --------------------------------------------
      --------------------------------------------
      --------------------------------------------
      --------------------------------------------
      --------------------------------------------
      --------------------------------------------
      --------------------------------------------
      --------------------------------------------
      --------------------------------------------
      --------------------------------------------
      --------------------------------------------
      --------------------------------------------
      --------------------------------------------
      --------------------------------------------
      --------------------------------------------
      -------------------------------------------- |}]
;;
